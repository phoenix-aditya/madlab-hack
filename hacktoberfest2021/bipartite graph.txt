#include<bits/stdc++.h>
using namespace std;

// BIPAARTITE GRAPHS ARE Instances when you can divide a set into sets which are disjoint amongs themselves
vector<bool> vis;
int n,m;
vector<vector<int>> adjl;
vector<int> col;
bool bipart;

void color(int u, int curr)
{
    if(col[u] != -1 and col[u] != curr)
    {
        bipart = false;
        return;
    }
    col[u] = curr;
    if(vis[u])
    {
        return;
    }    
    vis[u] = true;
    for(auto i : adjl[u])
    {
        color(i, curr xor 1);
    }
}
int main()
{
    bipart = true;
    cin >> n >>m;
    adjl = vector<vector<int>>(n);
    vis = vector<bool>(n,false);
    col = vector<int>(n,-1);
    
    for(int i=0;i<m;i++)
    {
        int u,v;
        cin >> u >> v;
        
        adjl[u].push_back(v);
        adjl[v].push_back(u);
    }
    
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
            color(i,0);
        }
    }
    
    if(bipart)
    {
        cout << "Graph is biparted";
    }
    else
    {
        cout << "Graph is not bipart";
    }
}
